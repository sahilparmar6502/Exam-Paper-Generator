ðŸ“‚ exam-paper-generator/
â”‚â”€â”€ ðŸ“‚ frontend/              # React.js (Frontend)
â”‚   â”œâ”€â”€ Dockerfile
â”‚   â”œâ”€â”€ package.json
â”‚   â”œâ”€â”€ src/
â”‚
â”‚â”€â”€ ðŸ“‚ api-gateway/           # API Gateway (Handles Routing)
â”‚   â”œâ”€â”€ Dockerfile
â”‚   â”œâ”€â”€ app.py
â”‚   â”œâ”€â”€ requirements.txt


    # Stores & Retrieves Questions
â”‚â”€â”€ ðŸ“‚ question-service/        # Microservice for storing and retrieving questions
â”‚â”€â”€ ðŸ“‚ app/                 # Main application logic
â”‚   â”‚â”€â”€ ðŸ“‚ models/          # Database models
â”‚   â”‚   â”‚â”€â”€ question.py     # Question schema/model for MongoDB
â”‚   â”‚â”€â”€ ðŸ“‚ routes/          # API routes for CRUD operations
â”‚   â”‚   â”‚â”€â”€ question_routes.py   # API endpoints to manage questions
â”‚   â”‚â”€â”€ ðŸ“‚ services/        # Business logic layer
â”‚   â”‚   â”‚â”€â”€ question_service.py  # Functions to fetch/add questions
â”‚   â”‚â”€â”€ ðŸ“‚ config/          # Configuration settings
â”‚   â”‚   â”‚â”€â”€ config.py       # MongoDB connection settings
â”‚   â”‚â”€â”€ __init__.py         # Initialize Flask app
â”‚â”€â”€ ðŸ“‚ tests/               # Unit tests for API and database
â”‚   â”‚â”€â”€ test_questions.py   # Test cases for question-service
â”‚â”€â”€ .env                    # Environment variables (MongoDB URI, secrets)
â”‚â”€â”€ Dockerfile              # Docker container setup for the service
â”‚â”€â”€ docker-compose.yml      # Define multi-container setup (if needed)
â”‚â”€â”€ requirements.txt        # Python dependencies (Flask, pymongo, etc.)
â”‚â”€â”€ app.py                  # Entry point for the Flask application
â”‚â”€â”€ README.md               # Documentation for this microservice
ðŸ”¹ Purpose: This service is responsible for storing, managing, and retrieving questions from the MongoDB database.
It allows scalabilityâ€”other services (like generation-service/) can fetch questions without worrying about data storage.


â”‚â”€â”€ ðŸ“‚ generation-service/    # Generates Unique Papers
â”‚   â”œâ”€â”€ Dockerfile
â”‚   â”œâ”€â”€ app.py
â”‚   â”œâ”€â”€ requirements.txt
Takes user input (e.g., topics, difficulty, total marks).
Calls question-service/ to fetch required questions.
Assembles the questions into a structured question paper.
Returns the final paper to the API Gateway.
ðŸ”¹ Example Request:


ðŸ“‚ pdf-service/
â”‚â”€â”€ ðŸ“‚ app/
â”‚   â”‚â”€â”€ pdf_generator.py  # Generates PDF from JSON data
â”‚   â”‚â”€â”€ routes.py         # API endpoints for PDF generation & download
â”‚â”€â”€ app.py                # Flask entry point
â”‚â”€â”€ requirements.txt      # Dependencies
â”‚â”€â”€ Dockerfile            # Container configuration


â”‚â”€â”€ ðŸ“‚ mongodb/               # Database Service
â”‚   â”œâ”€â”€ Dockerfile (Optional, if custom)
â”‚   â”œâ”€â”€ data/
â”‚
â”‚â”€â”€ ðŸ“‚ kafka/                 # (Optional) Kafka Broker
â”‚   â”œâ”€â”€ Dockerfile
â”‚
â”‚â”€â”€ ðŸ“‚ zookeeper/             # (Optional) Zookeeper for Kafka
â”‚   â”œâ”€â”€ Dockerfile
â”‚
â”‚â”€â”€ docker-compose.yml        # Manages all Containers
â”‚â”€â”€ .env                      # Stores Environment Variables
â”‚â”€â”€ README.md 